{"version":3,"file":"sentry.js","sourceRoot":"","sources":["../src/sentry.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from 'react-native';\nimport * as Updates from 'expo-updates';\nimport Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Application from 'expo-application';\nimport { RewriteFrames } from '@sentry/integrations';\nimport { Integration } from '@sentry/types';\n\nimport { ExpoBareIntegration } from './integrations/bare';\nimport { ExpoManagedIntegration } from './integrations/managed';\nimport { SentryExpoNativeOptions, overrideDefaultIntegrations } from './utils';\n\nimport { init as initNative, Integrations } from '@sentry/react-native';\nimport { AppManifest } from 'expo-constants/build/Constants.types';\n\nconst MANIFEST = Updates.manifest as AppManifest;\nconst IS_BARE_WORKFLOW = Constants.executionEnvironment === ExecutionEnvironment.Bare;\n\nconst DEFAULT_OPTIONS = {\n  enableNativeNagger: false, // Otherwise this will trigger an Alert(), let's rely on the logs instead\n  release: getDefaultRelease(),\n  dist: MANIFEST?.revisionId ? MANIFEST.version : `${Application.nativeBuildVersion}`,\n  ...(IS_BARE_WORKFLOW ? {} : { enableNative: false, enableNativeCrashHandling: false }),\n};\n\n/**\n * We assign the appropriate release based on if the app is running in development,\n * on an OTA Update, or on a no-publish build.\n */\nfunction getDefaultRelease(): string {\n  if (__DEV__) {\n    return 'DEVELOPMENT';\n  } else if (MANIFEST.revisionId) {\n    // Want to make sure this still exists in EAS update: equal on iOS & Android\n    return MANIFEST.revisionId;\n  } else {\n    // This is the default set by Sentry's native Xcode & Gradle scripts\n    return `${Application.applicationId}@${Application.nativeApplicationVersion}+${Application.nativeBuildVersion}`;\n  }\n}\n\nexport const init = (options: SentryExpoNativeOptions = {}) => {\n  const defaultExpoIntegrations = [\n    new Integrations.ReactNativeErrorHandlers({\n      onerror: false,\n      onunhandledrejection: true,\n    }),\n    IS_BARE_WORKFLOW ? new ExpoBareIntegration() : new ExpoManagedIntegration(),\n    new RewriteFrames({\n      iteratee: (frame) => {\n        if (frame.filename && frame.filename !== '[native code]') {\n          frame.filename =\n            Platform.OS === 'android' ? 'app:///index.android.bundle' : 'app:///main.jsbundle';\n        }\n        return frame;\n      },\n    }),\n  ];\n\n  let nativeOptions = { ...DEFAULT_OPTIONS, ...options } as SentryExpoNativeOptions;\n\n  if (Array.isArray(nativeOptions.integrations)) {\n    // Allow users to override Expo defaults...ymmv\n    nativeOptions.integrations = overrideDefaultIntegrations(\n      defaultExpoIntegrations,\n      nativeOptions.integrations\n    );\n  } else if (typeof nativeOptions.integrations === 'function') {\n    // Need to rewrite the function to take Expo's default integrations\n    let functionWithoutExpoIntegrations = nativeOptions.integrations;\n    const functionWithExpoIntegrations = (integrations: Integration[]) => {\n      return functionWithoutExpoIntegrations(\n        overrideDefaultIntegrations(integrations, defaultExpoIntegrations)\n      );\n    };\n    nativeOptions.integrations = functionWithExpoIntegrations;\n  } else {\n    nativeOptions.integrations = [...defaultExpoIntegrations];\n  }\n\n  if (__DEV__ && !nativeOptions.enableInExpoDevelopment) {\n    nativeOptions.enabled = false;\n    console.log(\n      '[sentry-expo] Disabled Sentry in development. Note you can set Sentry.init({ enableInExpoDevelopment: true });'\n    );\n  }\n\n  try {\n    return initNative({ ...nativeOptions });\n  } catch (e) {\n    if (IS_BARE_WORKFLOW) {\n      // Native projects have not been linked, try to continue with no native capability\n      console.warn(\n        `[sentry-expo] Disabling the Sentry Native SDK (all JS errors will still be reported).\\nTo enable it, run 'yarn add @sentry/react native' or 'npm install @sentry/react-native' in your project directory. To silence this warning, pass 'enableNative: false' to Sentry.init().`\n      );\n      return initNative({\n        ...nativeOptions,\n        enableNative: false,\n        enableNativeCrashHandling: false,\n      });\n    } else {\n      throw e;\n    }\n  }\n};\n"]}