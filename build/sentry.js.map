{"version":3,"file":"sentry.js","sourceRoot":"","sources":["../src/sentry.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from 'react-native';\nimport * as Updates from 'expo-updates';\nimport Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Application from 'expo-application';\nimport { RewriteFrames } from '@sentry/integrations';\nimport { init as initNative, Integrations } from '@sentry/react-native';\nimport { Integration } from '@sentry/types';\n\nimport { ExpoBareIntegration } from './integrations/bare';\nimport { ExpoManagedIntegration } from './integrations/managed';\nimport { SentryExpoNativeOptions, overrideDefaultIntegrations } from './utils';\n\nexport * as Native from '@sentry/react-native';\n\nconst isBareWorkflow = Constants.executionEnvironment === ExecutionEnvironment.Bare;\n\nexport const init = (options: SentryExpoNativeOptions = {}) => {\n  let manifest = Updates.manifest as any;\n  const defaultExpoIntegrations = [\n    new Integrations.ReactNativeErrorHandlers({\n      onerror: false,\n      onunhandledrejection: true,\n    }),\n    isBareWorkflow ? new ExpoBareIntegration() : new ExpoManagedIntegration(),\n    new RewriteFrames({\n      iteratee: (frame) => {\n        if (frame.filename && frame.filename !== '[native code]') {\n          frame.filename =\n            Platform.OS === 'android' ? 'app:///index.android.bundle' : 'app:///main.jsbundle';\n        }\n        return frame;\n      },\n    }),\n  ];\n\n  let nativeOptions = { ...options } as SentryExpoNativeOptions;\n\n  if (Array.isArray(nativeOptions.integrations)) {\n    // Allow users to override Expo defaults...ymmv\n    nativeOptions.integrations = overrideDefaultIntegrations(\n      defaultExpoIntegrations,\n      nativeOptions.integrations\n    );\n  } else if (typeof nativeOptions.integrations === 'function') {\n    // Need to rewrite the function to take Expo's default integrations\n    let functionWithoutExpoIntegrations = nativeOptions.integrations;\n    const functionWithExpoIntegrations = (integrations: Integration[]) => {\n      return functionWithoutExpoIntegrations(\n        overrideDefaultIntegrations(integrations, defaultExpoIntegrations)\n      );\n    };\n    nativeOptions.integrations = functionWithExpoIntegrations;\n  } else {\n    nativeOptions.integrations = [...defaultExpoIntegrations];\n  }\n\n  if (!nativeOptions.release) {\n    if (__DEV__) {\n      nativeOptions.release = 'DEVELOPMENT';\n    } else if (manifest.revisionId && Updates.updateId) {\n      nativeOptions.release = Updates.updateId;\n    } else {\n      // This is the default set by Sentry's native Xcode & Gradle scripts\n      nativeOptions.release = `${Application.applicationId}@${Application.nativeApplicationVersion}+${Application.nativeBuildVersion}`;\n    }\n  }\n\n  // Bail out automatically if the app isn't deployed\n  if (__DEV__ && !nativeOptions.enableInExpoDevelopment) {\n    nativeOptions.enabled = false;\n    console.log(\n      '[sentry-expo] Disabled Sentry in development. Note you can set Sentry.init({ enableInExpoDevelopment: true });'\n    );\n  }\n\n  if (!nativeOptions.dist) {\n    if (manifest.revisionId) {\n      nativeOptions.dist = manifest.version;\n    } else {\n      // This is the default set by Sentry's native Xcode & Gradle scripts\n      nativeOptions.dist = `${Application.nativeBuildVersion}`;\n    }\n  }\n\n  if (!isBareWorkflow) {\n    nativeOptions.enableNativeNagger = false;\n    nativeOptions.enableNative = false;\n    nativeOptions.enableNativeCrashHandling = false;\n  }\n\n  return initNative({ ...nativeOptions });\n};\n"]}