{"version":3,"file":"upload-sourcemaps.js","sourceRoot":"","sources":["../../src/hooks/upload-sourcemaps.ts"],"names":[],"mappings":"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","sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport path from 'path';\nimport rimraf from 'rimraf';\nimport mkdirp from 'mkdirp';\nimport fs from 'fs';\nimport sentryCliBinary from '@sentry/cli';\n\ntype Options = {\n  log: (message: string) => void;\n  projectRoot: string;\n  androidBundle: string;\n  androidSourceMap: string;\n  iosManifest: { releaseId: string; version: string };\n  iosSourceMap: string;\n  iosBundle: string;\n  config?: {\n    organization: string;\n    project: string;\n    authToken: string;\n    url: string;\n    release?: string;\n    deployEnv?: string;\n    setCommits?: boolean;\n    useGlobalSentryCli: boolean;\n    distribution?: string;\n  };\n};\n\nmodule.exports = async (options: Options) => {\n  let {\n    config,\n    log,\n    iosBundle,\n    iosSourceMap,\n    iosManifest,\n    androidBundle,\n    androidSourceMap,\n    projectRoot,\n  } = options;\n\n  const tmpdir = path.resolve(projectRoot, '.tmp', 'sentry');\n\n  rimraf.sync(tmpdir);\n  mkdirp.sync(tmpdir);\n\n  try {\n    // We use the same filenames for sourcemaps as Sentry does (even though the naming is unfortunate)\n    fs.writeFileSync(tmpdir + '/main.jsbundle', iosBundle, 'utf-8');\n    fs.writeFileSync(tmpdir + '/main.jsbundle.map', iosSourceMap, 'utf-8');\n    fs.writeFileSync(tmpdir + '/index.android.bundle', androidBundle, 'utf-8');\n    fs.writeFileSync(tmpdir + '/index.android.bundle.map', androidSourceMap, 'utf-8');\n\n    let organization,\n      project,\n      authToken,\n      url,\n      useGlobalSentryCli,\n      release,\n      setCommits,\n      deployEnv,\n      distribution;\n    if (!config) {\n      log('No config found in app.json, falling back to environment variables...');\n    } else {\n      ({\n        organization,\n        project,\n        authToken,\n        url,\n        useGlobalSentryCli,\n        release,\n        setCommits,\n        deployEnv,\n        distribution,\n      } = config);\n    }\n\n    release = release || process.env.SENTRY_RELEASE || iosManifest.releaseId;\n    distribution = distribution || process.env.SENTRY_DIST || iosManifest.version;\n\n    const childProcessEnv = Object.assign({}, process.env, {\n      SENTRY_ORG: organization || process.env.SENTRY_ORG,\n      SENTRY_PROJECT: project || process.env.SENTRY_PROJECT,\n      SENTRY_AUTH_TOKEN: authToken || process.env.SENTRY_AUTH_TOKEN,\n      SENTRY_URL: url || process.env.SENTRY_URL || 'https://sentry.io/',\n    });\n\n    const sentryCliBinaryPath = useGlobalSentryCli ? 'sentry-cli' : sentryCliBinary.getPath();\n\n    let output;\n    let createReleaseResult = await spawnAsync(sentryCliBinaryPath, ['releases', 'new', release], {\n      cwd: tmpdir,\n      env: childProcessEnv,\n    });\n\n    output = createReleaseResult.stdout.toString();\n    log(output);\n\n    let uploadResult = await spawnAsync(\n      sentryCliBinaryPath,\n      [\n        'releases',\n        'files',\n        release,\n        'upload-sourcemaps',\n        '.',\n        '--ext',\n        'jsbundle',\n        '--ext',\n        'bundle',\n        '--ext',\n        'map',\n        '--rewrite',\n        '--dist',\n        distribution,\n        '--strip-prefix',\n        projectRoot,\n      ],\n      {\n        cwd: tmpdir,\n        env: childProcessEnv,\n      }\n    );\n\n    output = uploadResult.stdout.toString();\n    log(output);\n\n    if (setCommits || process.env.SENTRY_SET_COMMITS) {\n      let commitsResult = await spawnAsync(\n        sentryCliBinaryPath,\n        ['releases', 'set-commits', '--auto', release],\n        {\n          env: childProcessEnv,\n        }\n      );\n\n      output = commitsResult.stdout.toString();\n      log(output);\n    }\n\n    let finalizeReleaseResult = await spawnAsync(\n      sentryCliBinaryPath,\n      ['releases', 'finalize', release],\n      {\n        env: childProcessEnv,\n      }\n    );\n\n    output = finalizeReleaseResult.stdout.toString();\n    log(output);\n\n    deployEnv = deployEnv || process.env.SENTRY_DEPLOY_ENV;\n    if (deployEnv) {\n      let deployResult = await spawnAsync(\n        sentryCliBinaryPath,\n        ['releases', 'deploys', release, 'new', '-e', deployEnv],\n        {\n          env: childProcessEnv,\n        }\n      );\n\n      // filter out unnamed deloy\n      output = deployResult.stdout.toString().replace('unnamed ', '');\n      log(output);\n    }\n  } catch (e) {\n    log(messageForError(e));\n    log(\n      `Verify that your Sentry configuration in app.json is correct and refer to https://docs.expo.io/versions/latest/guides/using-sentry.html`\n    );\n  } finally {\n    rimraf.sync(tmpdir);\n  }\n};\n\nfunction messageForError(e: Error & { stderr?: string }) {\n  let message = e.stderr ? e.stderr.replace(/^\\s+|\\s+$/g, '') : e.message;\n  if (message) {\n    if (message.indexOf('error: ') === 0) {\n      message = message.replace('error: ', '');\n    }\n    return `Error uploading sourcemaps to Sentry: ${message}`;\n  }\n\n  return 'Error uploading sourcemaps to Sentry';\n}\n"]}